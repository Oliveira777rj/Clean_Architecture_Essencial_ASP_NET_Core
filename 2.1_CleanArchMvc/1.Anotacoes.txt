Definindo o projeto - Escopo geral 

---- Definição das regras de nogocio da Caterogia ----

- Definir a funcionalidade para exibir as categorias.
- Definir a funcionalidade para criar uma nova categoria.
- Permitir alterar as propriedades de uma categoria existente (o Id da categoria não poderá ser alterado).
- Definir a funcionalidade para excluir uma categoria existente pelo seu Id.
- Definir o relacionamento entre categoria e produto (propriedade de navegação).
- Não permitir a criação de uma categoria com estado inconsistente (criar um construtor parametrizado).
- Não permitir que os atributos da categoria sejam alterados externamente (setter privados).
- Não permitir que o atributo CategoryId tenha valor negativo.
- Não permitir que o atributo Name seja Null ou Vazio(empty).
- O atributo Name não poderá conter menos que 3 caracteres.
- Definir a validação das regras de negocio para o domínio Categoria.


---- Persistência dos dados usada no projeto ----

- Usar banco de dados relacional.
- Usar a ferramenta de ORM: Entity Framework.
- Usar a abordagem Code-First do Entity Framework Core para criar o banco de dados e as tabelas.
- Provedor do banco de dados: Microsoft.EntityFrameworkCore.SqlServer.
- Ferramenta para aplicar o Migrations: EntityFrameworkCore.Tools.
- Desacoplar a camada de acesso a dados do ORM: Padrão Repository.


---- Nomeclaturas ----

- Usar a Nomeclatura recomendada pela Microsoft para nomear classes, métodos, parãmetros, e variaveis.

camelCase: Em palavras compostas ou frases, a primeira letra da palavra é iniciada com minuscula e unidas sem espaços
Ex. valorDoDesconto, nomeCompleto.

PascalCase: Em palavras compostas ou frases montadas com palavras, a primeira letra de cada palavra é iniciada com maiuscula
Ex. CalculaImpostodeRenda() , ValorDoDesconto.

Exemplos:

Recurso                            Nomeclatura                    Exemplo

Classe                             PascalCase                     Product, AddCategory
interface                          I + PascalCase                 IUser, ICalculateTotal
Metodo, propriedades               PascalCase                     Address, FirstName
Variaveis, Parametros              CamelCase                      stock, taxValue
Constantes                         Maiusculas com sublinhado      DISCOUNT_VALUE

- Idioma: Inglês.


---- Estrutura do Projeto ----

Clean Architecture: seguir a regra de dependência 
Criação de uma solução e 5 projetos separados em camadas com responsabilidades definidas.

-CleanArchMvc
  -CleanArchMvc.Domain : Modelo de domínio, regras de negocio, interfaces.
  -CleanArchMvc.Application : regras de domínio da aplicação, mapeamentos, serviços, DTOs, CQRS.
  -CleanArchMvc.Infra.Data : EF core, Contexto, Configurações, Migrations, Repository.
  -CleanArchMvc.Infra.Ioc : Dependency Injection, registro dos serviços, tempo de vida.
  -CleanArchMvc.WebUi : MVC, Controllers, Views, Filtros, ViewModels.

  O projeto CleanArchMvc.WebUi é do tipo ASP.NET Core Web App(Model-View-Controller)
  Os demais projetos seráo do tipo Class Library.

